/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package grafuri;

import java.awt.*;
import java.util.*;

/**
 *
 * @author Nicusor
 */
public class Graph {

    int maxVerts = 20;
    int nVerts = 0;
    int edges = 0;

    ArrayList VertexList = new ArrayList();
    int A[][] = new int[maxVerts][maxVerts];
    int t = 0;

    public Graph() {
        for (int i = 0; i < maxVerts; i++) {
            for (int j = 0; j < maxVerts; j++) {
                A[i][j] = 0;
            }
        }
    }

    public void addVertex() {
        VertexList.add(new Vertex(nVerts++));
    }

    public void addEdge(int v1, int v2) {
        A[v1][v2] = 1;
        A[v2][v1] = 1;
        edges++;
    }

    public void addEdge2(int v1, int v2, int w) {
        A[v1][v2] = w;
        A[v2][v1] = w;
        edges++;
    }

    public void BFS(int s) {
        System.out.print("[BFS] Parcurgerea in latime din nodul " + s + ": ");
        LinkedList queue = new LinkedList();
        ((Vertex) VertexList.get(s)).color = Color.gray;
        ((Vertex) VertexList.get(s)).distance = 0;
        queue.addFirst(VertexList.get(s));
        while (!queue.isEmpty()) {
            Vertex u = (Vertex) queue.getLast();
            System.out.print(u.index + " ");
            for (int v = 0; v < nVerts; v++) {
                if (A[v][u.index] == 1 && ((Vertex) VertexList.get(v)).color == Color.white) {
                    ((Vertex) VertexList.get(v)).color = Color.gray;
                    ((Vertex) VertexList.get(v)).distance = u.distance + 1;
                    ((Vertex) VertexList.get(v)).predecessor = u;
                    queue.addFirst(VertexList.get(v));
                }
            }
            queue.removeLast();
            u.color = Color.black;
        }
    }

    public void explorare(Vertex u) {
        u.color = Color.GRAY;
        System.out.print(u.index + " ");
        t++;
        u.distance = t;
        for (int i = 0; i < nVerts; i++) {
            if (A[i][u.index] == 1 && ((Vertex) VertexList.get(i)).color == Color.white) {
                ((Vertex) VertexList.get(i)).predecessor = u;
                explorare((Vertex) VertexList.get(i));
            }
        }
        u.color = Color.black;
        t++;
        u.finalized = t;
    }

    public void DFS() {
        System.out.print("[DFS] Parcurgerea in adancime: ");
        for (int u = 0; u < VertexList.size(); u++) {
            ((Vertex) VertexList.get(u)).color = Color.white;
            ((Vertex) VertexList.get(u)).predecessor = null;
        }
        t = 0;
        for (int u = 0; u < VertexList.size(); u++) {
            if (((Vertex) VertexList.get(u)).color == Color.white) {
                explorare((Vertex) VertexList.get(u));
            }
        }
        System.out.println();
    }

    public void Dijkstra(int s) {
        for (int u = 0; u < nVerts; u++) {
            ((Vertex) VertexList.get(u)).distance = 100;
            ((Vertex) VertexList.get(u)).predecessor = null;
        }
        ((Vertex) VertexList.get(s)).distance = 0;
        ArrayList Q = (ArrayList) VertexList.clone();

        while (!Q.isEmpty()) {
            int k = 0;
            int min = 300;
            for (int i = 0; i < Q.size(); i++) {
                if (((Vertex) Q.get(i)).distance < min) {
                    min = ((Vertex) Q.get(i)).distance;
                    k = i;
                }
            }
            Vertex u = ((Vertex) Q.get(k));
            Q.remove(k);

            for (int v = 0; v < nVerts; v++) {
                if (A[v][u.index] != 0
                        && ((Vertex) VertexList.get(v)).distance > u.distance + A[v][u.index]) {
                    ((Vertex) VertexList.get(v)).distance = u.distance + A[v][u.index];
                    ((Vertex) VertexList.get(v)).predecessor = u;
                }
            }
        }
        for (int v = 0; v < nVerts; v++) {
            System.out.println(((Vertex) VertexList.get(v)).distance));
        }
    }
}
